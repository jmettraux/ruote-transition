#!/usr/bin/env ruby

$: << '../ruote/lib'
$: << './lib'

require 'optparse'

require 'yaml'

require 'ruote/trans/xpdl'
require 'ruote/trans/yawl'
require 'ruote/trans/compiler'

require 'rubygems'
require 'ruote/reader'

#
# parse options

iformat = 'xpdl'
oformat = 'xml'

opts = OptionParser.new

opts.banner = "Usage: bin/to_ruote [options] {filename}"
opts.separator ""
opts.separator "attempts to turn an XPDL (or YAWL) file to a ruote process definition"
opts.separator ""
opts.separator "options:"

opts.on("-i", "--input {f}", "input format : xpdl|yawl") do |f|
  iformat = f[0, 1]
end
opts.on("-o", "--output {f}", "output format : xml|ruby|yaml|json|dot") do |f|
  oformat = f[0, 1]
end

opts.on("-h", "--help", "display this help content") do
  puts
  puts opts.to_s
  puts
  exit 0
end

opts_rest = opts.parse(ARGV)

if opts_rest.size < 1
  puts
  puts "file name is missing..."
  puts
  puts opts.to_s
  puts
  exit 1
end

#
# do the job

graphs = case iformat
  when 'x'
    Ruote::Trans::XPDL.parse opts_rest.first
  when 'y'
    Ruote::Trans::YAWL.parse opts_rest.first
  else
    $stderr.puts "unknow input format"
    exit 2
end

if oformat == 'd'
  puts graphs.first.to_dot
  exit 0
end
if oformat == 'i'
  puts graphs.first.inspect
  exit 0
end

tree = Ruote::Trans::StepCompiler.compile(graphs.first)

case oformat
  when 'x'
    puts Ruote::Reader.to_s(tree, 3)
  when 'r'
    puts Ruote::Reader.to_ruby(tree)
  when 'y'
    puts tree.to_yaml
  when 'j'
    require 'json'
    puts tree.to_json
  else
    $stderr.puts "unknown format '#{format}'"
    exit 1
end

